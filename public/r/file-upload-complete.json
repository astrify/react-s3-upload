{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "file-upload-complete",
	"type": "registry:block",
	"title": "Complete File Upload System",
	"description": "A complete file upload system with dropzone, error handling, and file list. Requires @astrify/react-s3-upload for context and utilities.",
	"dependencies": [
		"react-dropzone",
		"lucide-react",
		"clsx",
		"tailwind-merge",
		"sonner"
	],
	"registryDependencies": ["button"],
	"files": [
		{
			"path": "src/components/FileDropzone.tsx",
			"content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { formatBytes, useFileUpload } from \"@astrify/react-s3-upload\";\nimport { ImageIcon, UploadIcon } from \"lucide-react\";\nimport type * as React from \"react\";\nimport { type Accept, type FileRejection, useDropzone } from \"react-dropzone\";\n\ninterface FileDropzoneProps {\n\tonDrop?: (acceptedFiles: File[], rejectedFiles: FileRejection[]) => void;\n\tmaxSize?: number;\n\tmaxFiles?: number;\n\taccept?: Accept;\n\tclassName?: string;\n\tchildren?: React.ReactNode;\n\thideDefaultContent?: boolean;\n\temptyIcon?: React.ReactNode;\n\temptyTitle?: string;\n\temptyDescription?: string;\n}\n\n// Helper function to format rejection error messages\nfunction formatRejectionError(\n\tfile: File,\n\terrorCode: string,\n\terrorMessage: string,\n\t_maxSize: number,\n\t_maxFiles: number,\n): { message: string; details: string } {\n\tswitch (errorCode) {\n\t\tcase \"file-too-large\":\n\t\t\treturn {\n\t\t\t\tmessage: \"File size exceeded\",\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t\tcase \"file-invalid-type\":\n\t\t\treturn {\n\t\t\t\tmessage: \"Invalid file type\",\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t\tcase \"too-many-files\":\n\t\t\treturn {\n\t\t\t\tmessage: \"Too many files\",\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\tmessage: errorMessage,\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t}\n}\n\n// Helper function to check if accept only allows images\nfunction isImageOnlyAccept(accept: Accept | undefined): boolean {\n\tif (!accept) {\n\t\treturn false;\n\t}\n\tconst mimeTypes = Object.keys(accept);\n\treturn (\n\t\tmimeTypes.length > 0 && mimeTypes.every((type) => type.startsWith(\"image/\"))\n\t);\n}\n\n// Helper function to get dropzone icon\nfunction getDropzoneIcon(\n\taccept: Accept | undefined,\n\temptyIcon: React.ReactNode | undefined,\n): React.ReactNode {\n\tif (emptyIcon) {\n\t\treturn emptyIcon;\n\t}\n\n\tconst isImageOnly = isImageOnlyAccept(accept);\n\tif (isImageOnly) {\n\t\treturn <ImageIcon className=\"size-4 opacity-60\" />;\n\t}\n\treturn <UploadIcon className=\"size-4 opacity-60\" />;\n}\n\n// Helper function to generate file type description from Accept object\nfunction getAcceptDescription(accept: Accept | undefined): string {\n\tif (!accept || Object.keys(accept).length === 0) {\n\t\treturn \"Any file type\";\n\t}\n\n\tconst allExtensions: string[] = [];\n\n\tfor (const extensions of Object.values(accept)) {\n\t\tif (extensions && extensions.length > 0) {\n\t\t\tallExtensions.push(\n\t\t\t\t...extensions.map((ext) => ext.toUpperCase().replace(\".\", \"\")),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn allExtensions.length > 0 ? allExtensions.join(\", \") : \"Any file type\";\n}\n\n// Helper function to get dropzone text content\nfunction getDropzoneText(\n\taccept: Accept | undefined,\n\temptyTitle: string | undefined,\n\temptyDescription: string | undefined,\n\tmaxSize: number,\n\tmaxFiles: number,\n\tcurrentFileCount: number,\n) {\n\tconst isImageOnly = isImageOnlyAccept(accept);\n\n\tconst title =\n\t\temptyTitle ||\n\t\t(isImageOnly\n\t\t\t? maxFiles === 1\n\t\t\t\t? \"Drop your image here\"\n\t\t\t\t: \"Drop your images here\"\n\t\t\t: maxFiles === 1\n\t\t\t\t? \"Drop file here\"\n\t\t\t\t: \"Drop files here\");\n\n\tlet description = emptyDescription;\n\tlet fileCountText = \"\";\n\n\tif (!description) {\n\t\tconst sizeText = `max. ${formatBytes(maxSize, { si: false, decimalPlaces: 0 })}`;\n\t\tconst fileTypes = getAcceptDescription(accept);\n\t\tdescription = `${fileTypes} (${sizeText})`;\n\t}\n\n\t// Add file count on separate line if maxFiles > 1\n\tif (maxFiles > 1) {\n\t\tfileCountText = `${currentFileCount}/${maxFiles}`;\n\t}\n\n\treturn { title, description, fileCountText, isImageOnly };\n}\n\nexport function FileDropzone({\n\tonDrop: onDropProp,\n\tmaxSize: maxSizeProp,\n\tmaxFiles: maxFilesProp,\n\taccept: acceptProp,\n\tclassName,\n\temptyIcon,\n\temptyTitle,\n\temptyDescription,\n}: FileDropzoneProps) {\n\t// Get config from context (required)\n\tconst context = useFileUpload();\n\n\tconst maxSize = maxSizeProp ?? context.maxFileSize ?? 50 * 1024 * 1024;\n\tconst maxFiles = maxFilesProp ?? context.config.maxFiles ?? 10;\n\tconst accept = acceptProp ?? context.acceptedFileTypes;\n\tconst multiple = maxFiles > 1;\n\tconst remainingSlots = context.remainingSlots ?? maxFiles;\n\n\t// Handle file rejections and format error messages\n\tconst handleRejections = (fileRejections: FileRejection[]) => {\n\t\tconst errorMessages: Array<{\n\t\t\ttype: \"validation_error\";\n\t\t\tmessage: string;\n\t\t\tdetails: string;\n\t\t}> = [];\n\n\t\tfor (const rejection of fileRejections) {\n\t\t\tconst { file, errors } = rejection;\n\t\t\tfor (const error of errors) {\n\t\t\t\tconst formatted = formatRejectionError(\n\t\t\t\t\tfile,\n\t\t\t\t\terror.code,\n\t\t\t\t\terror.message,\n\t\t\t\t\tmaxSize,\n\t\t\t\t\tmaxFiles,\n\t\t\t\t);\n\t\t\t\terrorMessages.push({\n\t\t\t\t\ttype: \"validation_error\",\n\t\t\t\t\tmessage: formatted.message,\n\t\t\t\t\tdetails: formatted.details,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Push errors to context\n\t\tif (errorMessages.length > 0) {\n\t\t\tcontext.addErrors(errorMessages);\n\t\t}\n\n\t\treturn errorMessages;\n\t};\n\n\t// Use context addFiles and optional custom onDrop\n\tconst handleDrop =\n\t\tonDropProp ||\n\t\t(async (acceptedFiles: File[], fileRejections: FileRejection[]) => {\n\t\t\t// Clear any existing errors at the start of a new drop\n\t\t\tcontext.clearErrors();\n\n\t\t\t// Handle rejections with a small delay to trigger re-animation\n\t\t\tif (fileRejections.length > 0) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\thandleRejections(fileRejections);\n\t\t\t\t}, 50);\n\t\t\t}\n\n\t\t\t// Then handle accepted files\n\t\t\tif (acceptedFiles.length > 0) {\n\t\t\t\tawait context.addFiles(acceptedFiles);\n\t\t\t}\n\t\t});\n\n\tconst { getRootProps, getInputProps, isDragActive, open } = useDropzone({\n\t\tonDrop: handleDrop,\n\t\taccept,\n\t\tmaxSize,\n\t\tmaxFiles: remainingSlots,\n\t\tmultiple,\n\t\tnoClick: true, // We'll handle click manually\n\t});\n\n\tconst currentFileCount = maxFiles - remainingSlots;\n\n\tconst icon = getDropzoneIcon(accept, emptyIcon);\n\n\tconst { title, description, fileCountText, isImageOnly } = getDropzoneText(\n\t\taccept,\n\t\temptyTitle,\n\t\temptyDescription,\n\t\tmaxSize,\n\t\tmaxFiles,\n\t\tcurrentFileCount,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\t{...getRootProps({\n\t\t\t\tclassName: cn(\n\t\t\t\t\t\"relative rounded-lg border border-dashed p-6 text-center transition-colors\",\n\t\t\t\t\tisDragActive\n\t\t\t\t\t\t? \"border-primary bg-primary/5\"\n\t\t\t\t\t\t: \"border-muted-foreground/25 hover:border-muted-foreground/50\",\n\t\t\t\t\tclassName,\n\t\t\t\t),\n\t\t\t})}\n\t\t>\n\t\t\t<input\n\t\t\t\t{...getInputProps()}\n\t\t\t\tclassName=\"sr-only\"\n\t\t\t\taria-label=\"Upload file\"\n\t\t\t/>\n\n\t\t\t<div className=\"flex flex-col items-center justify-center px-4 py-3 text-center\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"mb-2 flex size-10 shrink-0 items-center justify-center rounded-full border bg-background\"\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t</div>\n\n\t\t\t\t<p className=\"mb-1.5 font-medium text-sm\">{title}</p>\n\t\t\t\t<p className=\"text-muted-foreground text-xs\">{description}</p>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclassName=\"mt-4\"\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\topen();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<UploadIcon className=\"-ms-1 size-4 opacity-60\" aria-hidden=\"true\" />\n\t\t\t\t\tSelect{\" \"}\n\t\t\t\t\t{isImageOnly\n\t\t\t\t\t\t? maxFiles === 1\n\t\t\t\t\t\t\t? \"image\"\n\t\t\t\t\t\t\t: \"images\"\n\t\t\t\t\t\t: maxFiles === 1\n\t\t\t\t\t\t\t? \"file\"\n\t\t\t\t\t\t\t: \"files\"}\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{fileCountText && (\n\t\t\t\t<div className=\"absolute right-3 bottom-4 text-muted-foreground text-xs\">\n\t\t\t\t\t{fileCountText}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "src/components/FileHeader.tsx",
			"content": "import { useFileUpload } from \"@/FileUploadContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { CloudUpload, Trash2 } from \"lucide-react\";\nimport type React from \"react\";\nimport { useRef } from \"react\";\nimport type { Accept } from \"react-dropzone\";\n\n// Convert Accept object to HTML input accept string\nfunction acceptToString(accept: Accept | undefined): string | undefined {\n\tif (!accept) {\n\t\treturn undefined;\n\t}\n\n\tconst parts: string[] = [];\n\tfor (const [mimeType, extensions] of Object.entries(accept)) {\n\t\tparts.push(mimeType);\n\t\tif (extensions && extensions.length > 0) {\n\t\t\tparts.push(...extensions);\n\t\t}\n\t}\n\treturn parts.join(\",\");\n}\n\ninterface FileHeaderProps {\n\tclassName?: string;\n\ttitle?: string;\n\tshowAddButton?: boolean;\n\tshowClearButton?: boolean;\n\taddButtonText?: string;\n\tclearButtonText?: string;\n}\n\nexport function FileHeader({\n\tclassName,\n\ttitle = \"Files\",\n\tshowAddButton = true,\n\tshowClearButton = true,\n\taddButtonText = \"Add files\",\n\tclearButtonText = \"Remove all\",\n}: FileHeaderProps) {\n\tconst { files, removeAll, addFiles, canAcceptMore, config } = useFileUpload();\n\tconst fileInputRef = useRef<HTMLInputElement>(null);\n\n\tif (files.length === 0) {\n\t\treturn null;\n\t}\n\n\tconst openFileDialog = () => {\n\t\tfileInputRef.current?.click();\n\t};\n\n\tconst handleFileInputChange = async (\n\t\te: React.ChangeEvent<HTMLInputElement>,\n\t) => {\n\t\tconst newFiles = Array.from(e.target.files || []);\n\t\tif (newFiles.length > 0) {\n\t\t\tawait addFiles(newFiles);\n\t\t}\n\t\te.target.value = \"\";\n\t};\n\n\treturn (\n\t\t<div className={cn(\"flex items-center justify-between gap-2\", className)}>\n\t\t\t<input\n\t\t\t\tref={fileInputRef}\n\t\t\t\ttype=\"file\"\n\t\t\t\tmultiple={(config.maxFiles ?? 10) > 1}\n\t\t\t\taccept={acceptToString(config.accept)}\n\t\t\t\tonChange={handleFileInputChange}\n\t\t\t\tclassName=\"sr-only\"\n\t\t\t\taria-label=\"Upload file\"\n\t\t\t/>\n\n\t\t\t<h3 className=\"truncate font-medium text-sm\">\n\t\t\t\t{title} ({files.length})\n\t\t\t</h3>\n\n\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t{showAddButton && (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\tonClick={openFileDialog}\n\t\t\t\t\t\tdisabled={!canAcceptMore}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CloudUpload\n\t\t\t\t\t\t\tclassName=\"-ms-0.5 size-3.5 opacity-60\"\n\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{addButtonText}\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\n\t\t\t\t{showClearButton && files.length > 0 && (\n\t\t\t\t\t<Button variant=\"outline\" size=\"sm\" onClick={removeAll}>\n\t\t\t\t\t\t<Trash2\n\t\t\t\t\t\t\tclassName=\"-ms-0.5 size-3.5 opacity-60\"\n\t\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{clearButtonText}\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "src/components/FileList.tsx",
			"content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { formatBytes, useFileUpload } from \"@astrify/react-s3-upload\";\nimport type { FileType, FileUpload } from \"@astrify/react-s3-upload\";\nimport {\n\tFileArchiveIcon,\n\tFileIcon,\n\tFileSpreadsheetIcon,\n\tFileTextIcon,\n\tHeadphonesIcon,\n\tImageIcon,\n\tRefreshCwIcon,\n\tVideoIcon,\n\tXIcon,\n} from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nfunction FilePreviewWithProgress({\n\tfile,\n\tshowPreview,\n}: { file: FileUpload; showPreview: boolean }) {\n\tconst [previewUrl, setPreviewUrl] = useState<string | null>(null);\n\n\tuseEffect(() => {\n\t\t// Create preview URL if it's an image and we have the file or a preview URL\n\t\tif (showPreview && file.type.startsWith(\"image/\")) {\n\t\t\tif (file.preview) {\n\t\t\t\tsetPreviewUrl(file.preview);\n\t\t\t} else if (file.file instanceof File) {\n\t\t\t\tconst url = URL.createObjectURL(file.file);\n\t\t\t\tsetPreviewUrl(url);\n\t\t\t\treturn () => URL.revokeObjectURL(url);\n\t\t\t}\n\t\t}\n\t}, [file, showPreview]);\n\n\t// For images with preview enabled, use progressive reveal effect\n\tif (showPreview && previewUrl && file.type.startsWith(\"image/\")) {\n\t\tif (file.status === \"pending\" || file.status === \"uploading\") {\n\t\t\tconst progress = file.status === \"pending\" ? 0 : file.progress || 0;\n\t\t\treturn (\n\t\t\t\t<div className=\"relative size-10 overflow-hidden rounded\">\n\t\t\t\t\t{/* Dimmed base image */}\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={previewUrl}\n\t\t\t\t\t\talt={file.name}\n\t\t\t\t\t\tclassName=\"absolute inset-0 size-10 object-cover opacity-30\"\n\t\t\t\t\t/>\n\t\t\t\t\t{/* Progressive reveal overlay */}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"absolute inset-0 overflow-hidden\"\n\t\t\t\t\t\tstyle={{ width: `${progress}%` }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={previewUrl}\n\t\t\t\t\t\t\talt={file.name}\n\t\t\t\t\t\t\tclassName=\"size-10 object-cover\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* Optional: Add a subtle progress line */}\n\t\t\t\t\t{file.status === \"uploading\" && progress > 0 && progress < 100 && (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"absolute inset-y-0 w-0.5 bg-primary/50\"\n\t\t\t\t\t\t\tstyle={{ left: `${progress}%` }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t// Completed or error state - show full image\n\t\treturn (\n\t\t\t<img\n\t\t\t\tsrc={previewUrl}\n\t\t\t\talt={file.name}\n\t\t\t\tclassName=\"size-10 rounded object-cover\"\n\t\t\t/>\n\t\t);\n\t}\n\n\t// For non-image files, use the circular progress indicator\n\tconst iconContent = (\n\t\t<div className=\"flex size-10 items-center justify-center\">\n\t\t\t{getFileIcon(file)}\n\t\t</div>\n\t);\n\n\tif (file.status === \"pending\") {\n\t\treturn (\n\t\t\t<div className=\"relative size-10\">\n\t\t\t\t{iconContent}\n\t\t\t\t<svg\n\t\t\t\t\tclassName=\"absolute inset-0 size-10\"\n\t\t\t\t\tviewBox=\"0 0 40 40\"\n\t\t\t\t\taria-label=\"Pending upload\"\n\t\t\t\t>\n\t\t\t\t\t<title>Pending upload</title>\n\t\t\t\t\t<circle\n\t\t\t\t\t\tcx=\"20\"\n\t\t\t\t\t\tcy=\"20\"\n\t\t\t\t\t\tr=\"18\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\tstrokeDasharray=\"4 3\"\n\t\t\t\t\t\tclassName=\"text-muted-foreground/40\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (file.status === \"uploading\" && file.progress > 0) {\n\t\treturn (\n\t\t\t<div className=\"relative size-10\">\n\t\t\t\t{iconContent}\n\t\t\t\t<svg\n\t\t\t\t\tclassName=\"-rotate-90 absolute inset-0 size-10\"\n\t\t\t\t\tviewBox=\"0 0 40 40\"\n\t\t\t\t\taria-label=\"Upload progress\"\n\t\t\t\t>\n\t\t\t\t\t<title>Upload progress</title>\n\t\t\t\t\t<circle\n\t\t\t\t\t\tcx=\"20\"\n\t\t\t\t\t\tcy=\"20\"\n\t\t\t\t\t\tr=\"18\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\tclassName=\"text-muted-foreground/20\"\n\t\t\t\t\t/>\n\t\t\t\t\t<circle\n\t\t\t\t\t\tcx=\"20\"\n\t\t\t\t\t\tcy=\"20\"\n\t\t\t\t\t\tr=\"18\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\tstrokeDasharray={`${2 * Math.PI * 18}`}\n\t\t\t\t\t\tstrokeDashoffset={`${2 * Math.PI * 18 * (1 - file.progress / 100)}`}\n\t\t\t\t\t\tclassName=\"text-primary transition-all duration-300\"\n\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn iconContent;\n}\n\nexport function getFileIcon(file: FileType) {\n\tconst type = file instanceof File ? file.type : file.type;\n\tconst name = file instanceof File ? file.name : file.name;\n\n\tif (\n\t\ttype.includes(\"pdf\") ||\n\t\tname.endsWith(\".pdf\") ||\n\t\ttype.includes(\"word\") ||\n\t\tname.endsWith(\".doc\") ||\n\t\tname.endsWith(\".docx\")\n\t) {\n\t\treturn <FileTextIcon className=\"size-4 opacity-60\" />;\n\t}\n\tif (\n\t\ttype.includes(\"zip\") ||\n\t\ttype.includes(\"archive\") ||\n\t\tname.endsWith(\".zip\") ||\n\t\tname.endsWith(\".rar\")\n\t) {\n\t\treturn <FileArchiveIcon className=\"size-4 opacity-60\" />;\n\t}\n\tif (\n\t\ttype.includes(\"excel\") ||\n\t\tname.endsWith(\".xls\") ||\n\t\tname.endsWith(\".xlsx\")\n\t) {\n\t\treturn <FileSpreadsheetIcon className=\"size-4 opacity-60\" />;\n\t}\n\tif (type.includes(\"video/\")) {\n\t\treturn <VideoIcon className=\"size-4 opacity-60\" />;\n\t}\n\tif (type.includes(\"audio/\")) {\n\t\treturn <HeadphonesIcon className=\"size-4 opacity-60\" />;\n\t}\n\tif (type.startsWith(\"image/\")) {\n\t\treturn <ImageIcon className=\"size-4 opacity-60\" />;\n\t}\n\treturn <FileIcon className=\"size-4 opacity-60\" />;\n}\n\nfunction getStatusDisplay(file: FileUpload) {\n\tswitch (file.status) {\n\t\tcase \"pending\":\n\t\t\treturn <p className=\"text-muted-foreground text-xs\">Queued</p>;\n\t\tcase \"uploading\":\n\t\t\treturn (\n\t\t\t\t<p className=\"text-muted-foreground text-xs\">\n\t\t\t\t\tUploading {file.progress ? `${Math.round(file.progress)}%` : \"\"}\n\t\t\t\t</p>\n\t\t\t);\n\t\tcase \"complete\":\n\t\t\treturn (\n\t\t\t\t<p className=\"text-muted-foreground text-xs\">\n\t\t\t\t\t{formatBytes(file.size)}\n\t\t\t\t</p>\n\t\t\t);\n\t\tcase \"error\":\n\t\t\treturn (\n\t\t\t\t<p className=\"text-destructive text-xs\">\n\t\t\t\t\t{file.error || \"Upload failed\"}\n\t\t\t\t</p>\n\t\t\t);\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\ninterface FileListProps {\n\tshowActions?: boolean;\n\tshowImagePreviews?: boolean;\n\tclassName?: string;\n}\n\nexport function FileList({\n\tshowActions = true,\n\tshowImagePreviews = false,\n\tclassName,\n}: FileListProps) {\n\tconst { files, removeFile, retryUpload } = useFileUpload();\n\n\tif (files.length === 0) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div className={cn(\"space-y-2\", className)}>\n\t\t\t{files.map((file) => (\n\t\t\t\t<div\n\t\t\t\t\tkey={file.sha256}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"flex items-center justify-between gap-2 rounded-lg border bg-background p-2 pe-3\",\n\t\t\t\t\t\tfile.status === \"pending\" && \"opacity-60\",\n\t\t\t\t\t\tfile.duplicateAlert && \"bg-primary/10\",\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex items-center gap-3 overflow-hidden\">\n\t\t\t\t\t\t<div className=\"shrink-0\">\n\t\t\t\t\t\t\t<FilePreviewWithProgress\n\t\t\t\t\t\t\t\tfile={file}\n\t\t\t\t\t\t\t\tshowPreview={showImagePreviews}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex min-w-0 flex-col gap-0.5\">\n\t\t\t\t\t\t\t<p className=\"truncate font-medium text-[13px]\">{file.name}</p>\n\t\t\t\t\t\t\t{getStatusDisplay(file)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{showActions && (\n\t\t\t\t\t\t<div className=\"flex items-center\">\n\t\t\t\t\t\t\t{file.status === \"error\" && (\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\tclassName=\"size-8 text-muted-foreground/80 hover:bg-transparent hover:text-foreground\"\n\t\t\t\t\t\t\t\t\tonClick={() => retryUpload(file.sha256)}\n\t\t\t\t\t\t\t\t\taria-label=\"Retry upload\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RefreshCwIcon className=\"size-4\" aria-hidden=\"true\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tclassName=\"-me-2 size-8 text-muted-foreground/80 hover:bg-transparent hover:text-foreground\"\n\t\t\t\t\t\t\t\tonClick={() => removeFile(file.sha256)}\n\t\t\t\t\t\t\t\taria-label=\"Remove file\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon className=\"size-4\" aria-hidden=\"true\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		}
	],
	"tailwind": {
		"config": {}
	},
	"cssVars": {},
	"docs": "This complete system requires @astrify/react-s3-upload and sonner to be installed:\n\n```bash\nnpm install @astrify/react-s3-upload sonner\n```\n\nThen wrap your app with the FileUploadProvider and add the Toaster:\n\n```tsx\nimport { FileUploadProvider } from '@astrify/react-s3-upload';\nimport { Toaster } from 'sonner';\n\nfunction App() {\n  return (\n    <>\n      <FileUploadProvider config={{\n        signedStorageUrl: '/api/signed-storage-url',\n        maxFiles: 10,\n        maxSize: 50 * 1024 * 1024\n      }}>\n        {/* Your components */}\n      </FileUploadProvider>\n      <Toaster position=\"bottom-right\" richColors />\n    </>\n  );\n}\n```",
	"categories": ["upload", "complete-system"]
}
