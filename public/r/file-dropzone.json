{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "file-dropzone",
	"type": "registry:component",
	"title": "File Dropzone",
	"description": "A flexible file dropzone component with drag-and-drop support, file validation, and context integration.",
	"dependencies": [
		"react-dropzone",
		"lucide-react",
		"clsx",
		"tailwind-merge",
		"sonner"
	],
	"registryDependencies": [],
	"files": [
		{
			"path": "src/components/FileDropzone.tsx",
			"content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { formatBytes, useFileUpload } from \"@astrify/react-s3-upload\";\nimport { ImageIcon, UploadIcon } from \"lucide-react\";\nimport type * as React from \"react\";\nimport { type Accept, type FileRejection, useDropzone } from \"react-dropzone\";\n\ninterface FileDropzoneProps {\n\tonDrop?: (acceptedFiles: File[], rejectedFiles: FileRejection[]) => void;\n\tmaxSize?: number;\n\tmaxFiles?: number;\n\taccept?: Accept;\n\tclassName?: string;\n\tchildren?: React.ReactNode;\n\thideDefaultContent?: boolean;\n\temptyIcon?: React.ReactNode;\n\temptyTitle?: string;\n\temptyDescription?: string;\n}\n\n// Helper function to format rejection error messages\nfunction formatRejectionError(\n\tfile: File,\n\terrorCode: string,\n\terrorMessage: string,\n\t_maxSize: number,\n\t_maxFiles: number,\n): { message: string; details: string } {\n\tswitch (errorCode) {\n\t\tcase \"file-too-large\":\n\t\t\treturn {\n\t\t\t\tmessage: \"File size exceeded\",\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t\tcase \"file-invalid-type\":\n\t\t\treturn {\n\t\t\t\tmessage: \"Invalid file type\",\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t\tcase \"too-many-files\":\n\t\t\treturn {\n\t\t\t\tmessage: \"Too many files\",\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\tmessage: errorMessage,\n\t\t\t\tdetails: file.name,\n\t\t\t};\n\t}\n}\n\n// Helper function to check if accept only allows images\nfunction isImageOnlyAccept(accept: Accept | undefined): boolean {\n\tif (!accept) {\n\t\treturn false;\n\t}\n\tconst mimeTypes = Object.keys(accept);\n\treturn (\n\t\tmimeTypes.length > 0 && mimeTypes.every((type) => type.startsWith(\"image/\"))\n\t);\n}\n\n// Helper function to get dropzone icon\nfunction getDropzoneIcon(\n\taccept: Accept | undefined,\n\temptyIcon: React.ReactNode | undefined,\n): React.ReactNode {\n\tif (emptyIcon) {\n\t\treturn emptyIcon;\n\t}\n\n\tconst isImageOnly = isImageOnlyAccept(accept);\n\tif (isImageOnly) {\n\t\treturn <ImageIcon className=\"size-4 opacity-60\" />;\n\t}\n\treturn <UploadIcon className=\"size-4 opacity-60\" />;\n}\n\n// Helper function to generate file type description from Accept object\nfunction getAcceptDescription(accept: Accept | undefined): string {\n\tif (!accept || Object.keys(accept).length === 0) {\n\t\treturn \"Any file type\";\n\t}\n\n\tconst allExtensions: string[] = [];\n\n\tfor (const extensions of Object.values(accept)) {\n\t\tif (extensions && extensions.length > 0) {\n\t\t\tallExtensions.push(\n\t\t\t\t...extensions.map((ext) => ext.toUpperCase().replace(\".\", \"\")),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn allExtensions.length > 0 ? allExtensions.join(\", \") : \"Any file type\";\n}\n\n// Helper function to get dropzone text content\nfunction getDropzoneText(\n\taccept: Accept | undefined,\n\temptyTitle: string | undefined,\n\temptyDescription: string | undefined,\n\tmaxSize: number,\n\tmaxFiles: number,\n\tcurrentFileCount: number,\n) {\n\tconst isImageOnly = isImageOnlyAccept(accept);\n\n\tconst title =\n\t\temptyTitle ||\n\t\t(isImageOnly\n\t\t\t? maxFiles === 1\n\t\t\t\t? \"Drop your image here\"\n\t\t\t\t: \"Drop your images here\"\n\t\t\t: maxFiles === 1\n\t\t\t\t? \"Drop file here\"\n\t\t\t\t: \"Drop files here\");\n\n\tlet description = emptyDescription;\n\tlet fileCountText = \"\";\n\n\tif (!description) {\n\t\tconst sizeText = `max. ${formatBytes(maxSize, { si: false, decimalPlaces: 0 })}`;\n\t\tconst fileTypes = getAcceptDescription(accept);\n\t\tdescription = `${fileTypes} (${sizeText})`;\n\t}\n\n\t// Add file count on separate line if maxFiles > 1\n\tif (maxFiles > 1) {\n\t\tfileCountText = `${currentFileCount}/${maxFiles}`;\n\t}\n\n\treturn { title, description, fileCountText, isImageOnly };\n}\n\nexport function FileDropzone({\n\tonDrop: onDropProp,\n\tmaxSize: maxSizeProp,\n\tmaxFiles: maxFilesProp,\n\taccept: acceptProp,\n\tclassName,\n\temptyIcon,\n\temptyTitle,\n\temptyDescription,\n}: FileDropzoneProps) {\n\t// Get config from context (required)\n\tconst context = useFileUpload();\n\n\tconst maxSize = maxSizeProp ?? context.maxFileSize ?? 50 * 1024 * 1024;\n\tconst maxFiles = maxFilesProp ?? context.config.maxFiles ?? 10;\n\tconst accept = acceptProp ?? context.acceptedFileTypes;\n\tconst multiple = maxFiles > 1;\n\tconst remainingSlots = context.remainingSlots ?? maxFiles;\n\n\t// Handle file rejections and format error messages\n\tconst handleRejections = (fileRejections: FileRejection[]) => {\n\t\tconst errorMessages: Array<{\n\t\t\ttype: \"validation_error\";\n\t\t\tmessage: string;\n\t\t\tdetails: string;\n\t\t}> = [];\n\n\t\tfor (const rejection of fileRejections) {\n\t\t\tconst { file, errors } = rejection;\n\t\t\tfor (const error of errors) {\n\t\t\t\tconst formatted = formatRejectionError(\n\t\t\t\t\tfile,\n\t\t\t\t\terror.code,\n\t\t\t\t\terror.message,\n\t\t\t\t\tmaxSize,\n\t\t\t\t\tmaxFiles,\n\t\t\t\t);\n\t\t\t\terrorMessages.push({\n\t\t\t\t\ttype: \"validation_error\",\n\t\t\t\t\tmessage: formatted.message,\n\t\t\t\t\tdetails: formatted.details,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Push errors to context\n\t\tif (errorMessages.length > 0) {\n\t\t\tcontext.addErrors(errorMessages);\n\t\t}\n\n\t\treturn errorMessages;\n\t};\n\n\t// Use context addFiles and optional custom onDrop\n\tconst handleDrop =\n\t\tonDropProp ||\n\t\t(async (acceptedFiles: File[], fileRejections: FileRejection[]) => {\n\t\t\t// Clear any existing errors at the start of a new drop\n\t\t\tcontext.clearErrors();\n\n\t\t\t// Handle rejections with a small delay to trigger re-animation\n\t\t\tif (fileRejections.length > 0) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\thandleRejections(fileRejections);\n\t\t\t\t}, 50);\n\t\t\t}\n\n\t\t\t// Then handle accepted files\n\t\t\tif (acceptedFiles.length > 0) {\n\t\t\t\tawait context.addFiles(acceptedFiles);\n\t\t\t}\n\t\t});\n\n\tconst { getRootProps, getInputProps, isDragActive, open } = useDropzone({\n\t\tonDrop: handleDrop,\n\t\taccept,\n\t\tmaxSize,\n\t\tmaxFiles: remainingSlots,\n\t\tmultiple,\n\t\tnoClick: true, // We'll handle click manually\n\t});\n\n\tconst currentFileCount = maxFiles - remainingSlots;\n\n\tconst icon = getDropzoneIcon(accept, emptyIcon);\n\n\tconst { title, description, fileCountText, isImageOnly } = getDropzoneText(\n\t\taccept,\n\t\temptyTitle,\n\t\temptyDescription,\n\t\tmaxSize,\n\t\tmaxFiles,\n\t\tcurrentFileCount,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\t{...getRootProps({\n\t\t\t\tclassName: cn(\n\t\t\t\t\t\"relative rounded-lg border border-dashed p-6 text-center transition-colors\",\n\t\t\t\t\tisDragActive\n\t\t\t\t\t\t? \"border-primary bg-primary/5\"\n\t\t\t\t\t\t: \"border-muted-foreground/25 hover:border-muted-foreground/50\",\n\t\t\t\t\tclassName,\n\t\t\t\t),\n\t\t\t})}\n\t\t>\n\t\t\t<input\n\t\t\t\t{...getInputProps()}\n\t\t\t\tclassName=\"sr-only\"\n\t\t\t\taria-label=\"Upload file\"\n\t\t\t/>\n\n\t\t\t<div className=\"flex flex-col items-center justify-center px-4 py-3 text-center\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"mb-2 flex size-10 shrink-0 items-center justify-center rounded-full border bg-background\"\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t>\n\t\t\t\t\t{icon}\n\t\t\t\t</div>\n\n\t\t\t\t<p className=\"mb-1.5 font-medium text-sm\">{title}</p>\n\t\t\t\t<p className=\"text-muted-foreground text-xs\">{description}</p>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclassName=\"mt-4\"\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\topen();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<UploadIcon className=\"-ms-1 size-4 opacity-60\" aria-hidden=\"true\" />\n\t\t\t\t\tSelect{\" \"}\n\t\t\t\t\t{isImageOnly\n\t\t\t\t\t\t? maxFiles === 1\n\t\t\t\t\t\t\t? \"image\"\n\t\t\t\t\t\t\t: \"images\"\n\t\t\t\t\t\t: maxFiles === 1\n\t\t\t\t\t\t\t? \"file\"\n\t\t\t\t\t\t\t: \"files\"}\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{fileCountText && (\n\t\t\t\t<div className=\"absolute right-3 bottom-4 text-muted-foreground text-xs\">\n\t\t\t\t\t{fileCountText}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		}
	],
	"tailwind": {
		"config": {}
	},
	"cssVars": {},
	"docs": "This component requires @astrify/react-s3-upload to be installed for the FileUploadProvider context.",
	"categories": ["upload", "form"]
}
